name: Terraform

on: workflow_dispatch

env:
  ARM_CLIENT_ID: '8c66bdff-56cc-420d-bbcf-aacf554c41fb'
  ARM_CLIENT_SECRET: 'P_J.9Zd3GH.DAsZ4aukS88D76R-rFPm745'
  ARM_SUBSCRIPTION_ID: '6bd2e8a6-1e70-4479-b096-a4d345dfa39d'
  ARM_TENANT_ID: '5aff4dce-2c57-4169-9cc9-464ba4b28699'
  TF_VAR_location: 'eastus'

jobs:
  terraform:
    runs-on: ubuntu-latest


    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Setup provider
        run: curl https://raw.githubusercontent.com/chanzuckerberg/terraform-provider-snowflake/main/download.sh | bash -s -- -b $HOME/.terraform.d/plugins
      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir=./src/main providers mirror ~/.terraform.d/plugins

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform -chdir=./src/main plan

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=./src/main apply -auto-approve


